description: Notify a Slack channel with a custom message

parameters:
  channel:
    description: >
      Channel, private group, or IM channel to send message to. Can be an encoded ID,
      or a name.
    type: string

  message:
    description: Enter custom message.
    type: string
    default: Your job on CircleCI has completed.

  color:
    description: Hex color value for notification attachment color.
    type: string
    default: "#333333"

  mentions:
    description: A comma separated list of user IDs. No spaces.
    type: string
    default: ""

  author_name:
    description: Optional author name
    type: string
    default: ""

  author_link:
    description: Optional author link
    type: string
    default: ""

  title:
    description: Optional title
    type: string
    default: ""

  title_link:
    description: Optional title link
    type: string
    default: ""

  footer:
    description: Optional footer
    type: string
    default: ""

  ts:
    description: Optional timestamp
    type: string
    default: ""

  include_project_field:
    description: Whether or not to include the Project field in the message
    type: boolean
    default: true

  include_job_number_field:
    description: Whether or not to include the Job Number field in the message
    type: boolean
    default: true

  include_visit_job_action:
    description: Whether or not to include the Visit Job action in the message
    type: boolean
    default: true

  button_links:
    description: A string (space delimited) with the url names and links
    type: string
    default: ""


steps:
  - run:
      name: Provide error if non-bash shell
      command: |
        if [ -z "$BASH" ]; then
          echo Bash not installed.
          exit 1
        fi

  - run:
      name: Slack Notification
      shell: /bin/bash
      command: |
        # set up attachments json
        MESSAGE="<< parameters.message >>"
        AUTHOR_NAME="<< parameters.author_name >>"
        AUTHOR_LINK="<< parameters.author_link >>"
        TITLE="<< parameters.title >>"
        TITLE_LINK="<< parameters.title_link >>"
        FOOTER="<< parameters.footer >>"
        TS="<< parameters.ts >>"
        COLOR="<< parameters.color >>"
        attachments_json="[{
          \"fallback\": \"$MESSAGE - $CIRCLE_BUILD_URL\",
          \"text\": \"$MESSAGE $SLACK_MENTIONS\",
          \"author_name\": \"$AUTHOR_NAME\",
          \"author_link\": \"$AUTHOR_LINK\",
          \"title\": \"$TITLE\",
          \"title_link\": \"$TITLE_LINK\",
          \"footer\": \"$FOOTER\",
          \"ts\": \"$TS\",
          \"fields\": [],
          \"actions\": [],
          \"color\": \"$COLOR\"
        }]"
        <<# parameters.include_project_field >>
        attachments_json=$(echo $attachments_json | jq ".[].fields[.[].fields | length] |= . +
        {
          \"title\": \"Project\",
          \"value\": \"$CIRCLE_PROJECT_REPONAME\",
          \"short\": true
        }")
        <</ parameters.include_project_field >>
        <<# parameters.include_job_number_field >>
        attachments_json=$(echo $attachments_json | jq ".[].fields[.[].fields | length] |= . +
        {
          \"title\": \"Job Number\",
          \"value\": \"$CIRCLE_BUILD_NUM\",
          \"short\": true
        }")
        <</ parameters.include_job_number_field >>
        <<# parameters.include_visit_job_action >>
        attachments_json=$(echo $attachments_json | jq ".[].actions[.[].actions | length] |= . +
        {
          \"type\": \"button\",
          \"text\": \"Visit Job\",
          \"url\": \"$CIRCLE_BUILD_URL\"
        }")
        <</ parameters.include_visit_job_action >>
        <<# parameters.button_links >>
        for link in << parameters.button_links >>; do
        	name="${link##*/}"
        	name="${name%*.html}"
        	attachments_json=$(echo $attachments_json | jq ".[].actions[.[].actions | length] |= . +
        	{
              \"type\": \"button\",
              \"text\": \"$name\",
              \"url\": \"$link\"
        	}")
        done
        <</ parameters.button_links >>
        echo $attachments_json
        # Provide error if no token is set and error. Otherwise continue
        if [[ -z "$SLACK_OAUTH_TOKEN" ]]; then
          echo "NO SLACK_OAUTH_TOKEN SET"
          echo "Please set the SLACK_OAUTH_TOKEN environment variable"
          exit 1
        else
          # Webhook properly set.
          echo Notifying Slack Channel
          #Create Members string
          if [ -n "<< parameters.mentions >>" ]; then
            IFS="," read -ra SLACK_MEMBERS \<<< "<< parameters.mentions >>"
            for i in "${SLACK_MEMBERS[@]}"; do
              if [ $(echo ${i} | head -c 1) == "S" ]; then
                SLACK_MENTIONS="${SLACK_MENTIONS}<!subteam^${i}> "
              elif echo ${i} | grep -E "^(here|channel|everyone)$" > /dev/null; then
                SLACK_MENTIONS="${SLACK_MENTIONS}<!${i}> "
              else
                SLACK_MENTIONS="${SLACK_MENTIONS}<@${i}> "
              fi
            done
          fi
          CURL_ARGS=(
            -X POST
            -H 'Content-Type: application/x-www-form-urlencoded'
            -H 'Cache-Control: no-cache'
            -d "token=${SLACK_OAUTH_TOKEN}"
            -d 'as_user=true'
            <<# parameters.channel >>
            -d "channel=<< parameters.channel >>"
            <</ parameters.channel >>
            -d "attachments=[$attachments_json]"
          )
          curl "${CURL_ARGS[@]}" "https://slack.com/api/chat.postMessage"
        fi
